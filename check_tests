#!/usr/bin/env python
"""
Script to check test file existence and structure.
"""

import os
import sys
import inspect
import unittest

def check_test_file(file_path, file_name):
    """Check if a test file exists and has proper test classes."""
    print(f"Checking {file_name}...")
    
    if not os.path.exists(file_path):
        print(f"ERROR: {file_name} does not exist at {file_path}")
        return False
    
    print(f"File exists: {file_path}")
    
    # Check if the file can be imported
    try:
        sys.path.insert(0, os.path.dirname(os.path.dirname(file_path)))
        module_name = f"tests.{os.path.splitext(os.path.basename(file_path))[0]}"
        
        print(f"Attempting to import {module_name}...")
        module = __import__(module_name, fromlist=['*'])
        
        # Find all test classes in the module
        test_classes = []
        for name, obj in inspect.getmembers(module):
            if inspect.isclass(obj) and issubclass(obj, unittest.TestCase) and obj != unittest.TestCase:
                test_classes.append(name)
        
        if not test_classes:
            print(f"ERROR: No TestCase classes found in {file_name}")
            return False
            
        print(f"Found {len(test_classes)} test classes:")
        for cls_name in test_classes:
            cls = getattr(module, cls_name)
            
            # Find test methods in the class
            test_methods = []
            for method_name, method in inspect.getmembers(cls, predicate=inspect.isfunction):
                if method_name.startswith('test_'):
                    test_methods.append(method_name)
            
            print(f"  - {cls_name}: {len(test_methods)} test methods")
            
            if not test_methods:
                print(f"    WARNING: No test methods found in {cls_name}")
        
        return True
        
    except ImportError as e:
        print(f"ERROR: Cannot import {file_name}: {e}")
        return False
    except Exception as e:
        print(f"ERROR: Unexpected error checking {file_name}: {e}")
        return False

def main():
    """Check test files."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Check basic tests
    basic_test_path = os.path.join(script_dir, "tests", "test_events.py")
    basic_ok = check_test_file(basic_test_path, "test_events.py")
    
    # Check async tests
    async_test_path = os.path.join(script_dir, "tests", "test_async_events.py")
    async_ok = check_test_file(async_test_path, "test_async_events.py")
    
    if basic_ok and async_ok:
        print("\nAll test files look good!")
    else:
        print("\nIssues found with test files.")

if __name__ == "__main__":
    main()