# tests/conftest.py
"""
Configuration file for pytest and unittest discovery.

This file properly sets up the Python path and import system
to ensure tests can find the modules they need to test.
"""

import os
import sys
import logging

# Configure logging for tests
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Get the project root directory
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
logger.debug(f"Project root: {project_root}")

# Add the project root to Python path
sys.path.insert(0, project_root)
logger.debug(f"Added to Python path: {project_root}")

# Add src directory to Python path
src_path = os.path.join(project_root, 'src')
sys.path.insert(0, src_path)
logger.debug(f"Added to Python path: {src_path}")

# Add tests directory to Python path
tests_path = os.path.join(project_root, 'tests')
sys.path.insert(0, tests_path)
logger.debug(f"Added to Python path: {tests_path}")

# Add integration and unit test directories to make imports work correctly
integration_path = os.path.join(tests_path, 'integration')
unit_path = os.path.join(tests_path, 'unit')
sys.path.insert(0, integration_path)
sys.path.insert(0, unit_path)
logger.debug(f"Added test directories to Python path")

# Create minimal package structure for cleaner imports
# This creates empty __init__.py files if they don't exist
# which allows importing tests as modules
def ensure_package_structure(directory):
    """Ensure a directory and its parents have __init__.py files to make them packages."""
    if not os.path.isdir(directory):
        return
        
    # Create __init__.py if it doesn't exist
    init_file = os.path.join(directory, '__init__.py')
    if not os.path.exists(init_file):
        with open(init_file, 'w') as f:
            f.write("# Auto-generated by conftest.py")
        logger.debug(f"Created: {init_file}")
    
    # Process subdirectories
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)
        if os.path.isdir(item_path):
            ensure_package_structure(item_path)

# Setup proper package structure for test directories
ensure_package_structure(tests_path)

# Define module mappings to help with imports
# These create effective aliases to make imports clearer
module_mappings = {
    'src.core': 'core',
    'src.data': 'data',
    'src.models': 'models',
    'src.strategy': 'strategy',
    'src.execution': 'execution'
}

# Setup module mappings
for source, alias in module_mappings.items():
    if source in sys.modules:
        sys.modules[alias] = sys.modules[source]
    try:
        module = __import__(source, fromlist=['*'])
        sys.modules[alias] = module
        logger.debug(f"Created module mapping: {source} â†’ {alias}")
    except ImportError:
        logger.debug(f"Could not import {source} for mapping")

# Print Python path for debugging (only when running directly)
if __name__ == "__main__":
    print(f"Project root: {project_root}")
    print(f"Python path: {sys.path}")
    print(f"Module mappings: {list(module_mappings.items())}")
